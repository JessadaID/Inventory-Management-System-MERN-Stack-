const Product = require("../models/Product");

/**
 * POST	/api/products	‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà	{ name, sku, category, stockCount, price, description }
 * GET	/api/products	‡∏î‡∏∂‡∏á ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Query Params ‡πÄ‡∏ä‡πà‡∏ô ?search=... ‡∏´‡∏£‡∏∑‡∏≠ ?category=...)	N/A
 * GET	/api/products/:id	‡∏î‡∏∂‡∏á ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° ID	N/A
 * PUT	/api/products/:id	‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° ID	{ name, price, description } (‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)
 * DELETE	/api/products/:id	‡∏•‡∏ö ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° ID	N/A
 */

function stockLevelValidator(stockCount, lowStockLevel) {
  const highStockLevel = lowStockLevel + 10;
  if (stockCount <= lowStockLevel) {
    return "Low";
  } else if (stockCount <= highStockLevel) {
    return "Medium";
  } else {
    return "High";
  }
}

const createProduct = async (req, res) => {
  try {
    const productsData = req.body;
    let result;

    if (Array.isArray(productsData)) {
      if (productsData.length === 0) {
        return res.status(400).json({
          success: false,
          message: "Empty array provided for bulk creation.",
        });
      }

      result = await Product.insertMany(productsData, { ordered: false });
      res.status(201).json({
        success: true,
        message: `${result.length} products created successfully.`,
        products: result,
      });
    } else if (typeof productsData === "object" && productsData !== null) {
      // üì¶ ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (Single Create)
      result = await Product.create(productsData);

      res.status(201).json({
        success: true,
        message: "Product created successfully",
        product: result,
      });
    } else {
      return res.status(400).json({
        success: false,
        message:
          "Invalid data format. Expected a single object or an array of objects.",
      });
    }
  } catch (error) {
    console.error("Error details:", error);
    const statusCode =
      error.name === "ValidationError" || error.code === 11000 ? 400 : 500;

    res.status(statusCode).json({
      success: false,
      message: `Error during product creation: ${error.message}`,
      details: error.writeErrors
        ? error.writeErrors.map((e) => e.errmsg)
        : undefined,
    });
  }
};
const getallProducts = async (req, res) => {
  let page = parseInt(req.query.page) || 1;
  let limit = parseInt(req.query.limit) || 10;
  let search = req.query.search || "";
  let category = req.query.category || "";

  try {
    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (Match Condition)
    const matchCondition = {
      name: { $regex: search, $options: "i" },
      ...(category && { category }),
    };

    // 2. ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Total Count) ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡πÉ‡∏ä‡πâ matchCondition ‡πÅ‡∏ó‡∏ô {} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const totalCount = await Product.countDocuments(matchCondition); 

    // 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Total Price) ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    const aggregationResult = await Product.aggregate([
      // A. ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô Match: ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° search ‡πÅ‡∏•‡∏∞ category
      { $match: matchCondition },
      // B. ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô Group: ‡∏£‡∏ß‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå price
      { 
        $group: {
          _id: null, // ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          totalPrice: { $sum: "$price" },
        } 
      }
    ]);

    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ totalPrice ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå)
    const totalDatabasePrice = 
      aggregationResult.length > 0 ? aggregationResult[0].totalPrice : 0;
    
    // 4. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤ (Pagination)
    const products = await Product.find(matchCondition)
      .limit(limit)
      .populate("category", "name")
      .sort({ name: 1 })
      .skip((page - 1) * limit);

    // 5. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lowStockcount ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ (Current Page)
    const lowStockcount = products.filter(
      (product) =>
        stockLevelValidator(product.stockCount, product.minStockLevel) === "Low"
    ).length;
    
    res.json({
      success: true,
      message: "Products retrieved successfully",
      page: page,
      limit: limit,
      total: totalCount, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç)
      products: products.map((product) => ({
        ...product.toObject(),
        stockLevel: stockLevelValidator(
          product.stockCount,
          product.minStockLevel
        ),
      })),
      lowStockcount: lowStockcount,
      totalPrice: totalDatabasePrice, 
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      message: `Server error : ${error.message}`,
    });
  }
};

const getProductById = async (req, res) => {
  try {
    const productId = req.params.id;
    const product = await Product.findById(productId);
    if (!product) {
      return res.status(404).json({
        success: false,
        message: "Product not found",
      });
    }
    res.json({
      success: true,
      message: `Product details for ID: ${productId}`,
      product: product,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: `Server error : ${error.message}`,
    });
  }
};

const updateProductById = async (req, res) => {
  try {
    const productId = req.params.id;
    const { name, sku, category, price, stockCount, description } = req.body;

    const updatedProduct = {
      name,
      sku,
      category,
      price,
      stockCount,
      description,
    };

    const product = await Product.findByIdAndUpdate(productId, updatedProduct, {
      new: true,
      runValidators: true,
    });

    res.json({
      success: true,
      message: `Product updated for ID: ${productId}`,
      product: product,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: `Server error : ${error.message}`,
    });
  }
};

const deleteProductById = async (req, res) => {
  try {
    const productId = req.params.id;
    const product = await Product.findByIdAndDelete(productId);
    res.json({
      success: true,
      message: `Product deleted for ID: ${productId}`,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: `Server error : ${error.message}`,
    });
  }
};

module.exports = {
  createProduct,
  getallProducts,
  getProductById,
  updateProductById,
  deleteProductById,
};
